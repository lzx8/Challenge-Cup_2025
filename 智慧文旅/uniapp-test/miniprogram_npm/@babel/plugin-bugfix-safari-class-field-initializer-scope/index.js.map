{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helperPluginUtils = require('@babel/helper-plugin-utils');\nvar core = require('@babel/core');\n\nfunction needsWrapping(node) {\n  if (core.types.isLiteral(node) && !core.types.isTemplateLiteral(node)) {\n    return false;\n  }\n  if (core.types.isCallExpression(node) || core.types.isOptionalCallExpression(node) || core.types.isNewExpression(node)) {\n    return needsWrapping(node.callee) || node.arguments.some(needsWrapping);\n  }\n  if (core.types.isTemplateLiteral(node)) {\n    return node.expressions.some(needsWrapping);\n  }\n  if (core.types.isTaggedTemplateExpression(node)) {\n    return needsWrapping(node.tag) || needsWrapping(node.quasi);\n  }\n  if (core.types.isArrayExpression(node)) {\n    return node.elements.some(needsWrapping);\n  }\n  if (core.types.isObjectExpression(node)) {\n    return node.properties.some(prop => {\n      if (core.types.isObjectProperty(prop)) {\n        return needsWrapping(prop.value) || prop.computed && needsWrapping(prop.key);\n      }\n      if (core.types.isObjectMethod(prop)) {\n        return false;\n      }\n      return false;\n    });\n  }\n  if (core.types.isMemberExpression(node) || core.types.isOptionalMemberExpression(node)) {\n    return needsWrapping(node.object) || node.computed && needsWrapping(node.property);\n  }\n  if (core.types.isFunctionExpression(node) || core.types.isArrowFunctionExpression(node) || core.types.isClassExpression(node)) {\n    return false;\n  }\n  if (core.types.isThisExpression(node)) {\n    return false;\n  }\n  if (core.types.isSequenceExpression(node)) {\n    return node.expressions.some(needsWrapping);\n  }\n  return true;\n}\nfunction wrapInitializer(path) {\n  const {\n    value\n  } = path.node;\n  if (value && needsWrapping(value)) {\n    path.node.value = core.types.callExpression(core.types.arrowFunctionExpression([], value), []);\n  }\n}\nvar index = helperPluginUtils.declare(api => {\n  api.assertVersion(\"^7.16.0\");\n  return {\n    name: \"plugin-bugfix-safari-class-field-initializer-scope\",\n    visitor: {\n      ClassProperty(path) {\n        wrapInitializer(path);\n      },\n      ClassPrivateProperty(path) {\n        wrapInitializer(path);\n      }\n    }\n  };\n});\n\nexports.default = index;\n//# sourceMappingURL=index.js.map\n"]}